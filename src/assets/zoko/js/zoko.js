// Generated by CoffeeScript 1.12.7
var BoxBlock, BoxObject, Camera, CameraController, EmptyBlock, ZokoGame, Highscore, LevelState, LevelView, LiftBlock, LiftObject, Observable, PlatformBlock, Player, PlayerController, PlayerObject, SkyObject, SolidBlock, StaticLevelObject, UI, Zoko, createTextures, e3d, loadFilesUsing, loadImageFile, loadImageFiles, loadJsonFile, loadJsonFiles, loadResourceFiles, makeBackFace, makeBox, makeFrontFace, makeLeftFace, makeLidlessBox, makeQuad, makeRightFace, makeTopFace, mat, resource_dir, vec,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Observable = (function() {
  function Observable() {}

  Observable.prototype.notifyObservers = function() {
    var j, len, observer, ref, results;
    if (this.observers != null) {
      ref = this.observers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        observer = ref[j];
        if (observer != null) {
          results.push(observer.update(this, arguments));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return Observable;

})();

CameraController = (function() {
  function CameraController(levelView, canvasOverlay) {
    var camera, mouseDown, previousX, previousY, sensitivity;
    camera = levelView.camera;
    mouseDown = false;
    previousX = 0;
    previousY = 0;
    sensitivity = 0.01;
    $(canvasOverlay).on('mousedown', function(e) {
      mouseDown = true;
      previousX = e.screenX;
      return previousY = e.screenY;
    });
    $(document).on('mouseup', function(e) {
      return mouseDown = false;
    }).on('mousemove', function(e) {
      var dx, dy;
      if (mouseDown) {
        dx = (e.screenX - previousX) * sensitivity;
        dy = (e.screenY - previousY) * sensitivity;
        camera.rotate(dx, dy);
        previousX = e.screenX;
        return previousY = e.screenY;
      }
    });
  }

  return CameraController;

})();

ZokoGame = (function(superClass) {
  var zeroExtend;

  extend(ZokoGame, superClass);

  zeroExtend = function(number, length) {
    var str;
    str = '' + number;
    while (str.length < length) {
      str = '0' + str;
    }
    return str;
  };

  function ZokoGame(levelView1) {
    this.levelView = levelView1;
    this.currentLevel = 1;
    this.numLevels = 5;
    this.loadCurrentLevel();
    this.solvedLevels = [];
    this.highscore = new Highscore;
  }

  ZokoGame.prototype.newZokoGame = function() {};

  ZokoGame.prototype.restartLevel = function() {
    return this.loadCurrentLevel();
  };

  ZokoGame.prototype.nextLevel = function() {
    this.currentLevel++;
    if (this.currentLevel > this.numLevels) {
      this.currentLevel = 1;
    }
    return this.loadCurrentLevel();
  };

  ZokoGame.prototype.previousLevel = function() {
    this.currentLevel--;
    if (this.currentLevel < 0) {
      this.currentLevel = this.numLevels;
    }
    return this.loadCurrentLevel();
  };

  ZokoGame.prototype.loadCurrentLevel = function() {
    var instance, levelPath;
    levelPath = 'levels/' + zeroExtend(this.currentLevel, 2) + '.json';
    instance = this;
    return loadJsonFile(levelPath, function(level) {
      var levelState;
      levelState = new LevelState(level);
      levelState.onUpdate = function() {
        return instance.notifyObservers(levelState);
      };
      levelState.observers = [instance.levelView];
      return levelState.notifyObservers();
    });
  };

  return ZokoGame;

})(Observable);

Highscore = (function() {
  function Highscore() {
    this.list = this.getHighscoreObj();
  }

  Highscore.prototype.getHighscoreObj = function() {
    var obj;
    obj = localStorage.getItem('highscore');
    if (obj != null) {
      return JSON.parse(obj);
    } else {
      return {
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0
      };
    }
  };

  Highscore.prototype.setHighscore = function(level, steps) {
    var current;
    current = this.list[level];
    if ((current > steps) || (current === 0)) {
      this.list[level] = steps;
      return localStorage.setItem('highscore', JSON.stringify(this.list));
    }
  };

  Highscore.prototype.getHighscore = function(level) {
    return this.list[level];
  };

  return Highscore;

})();

EmptyBlock = (function() {
  EmptyBlock.prototype.type = 'empty';

  EmptyBlock.prototype["static"] = false;

  function EmptyBlock(level1, position3) {
    this.level = level1;
    this.position = position3;
  }

  EmptyBlock.prototype.move = function() {
    var below;
    below = this.level.blockBelow(this.position);
    return below.type !== 'empty';
  };

  EmptyBlock.prototype.update = function() {
    return false;
  };

  return EmptyBlock;

})();

SolidBlock = (function() {
  function SolidBlock() {}

  SolidBlock.prototype.type = 'solid';

  SolidBlock.prototype["static"] = true;

  SolidBlock.prototype.move = function() {
    return false;
  };

  SolidBlock.prototype.update = function() {
    return false;
  };

  return SolidBlock;

})();

PlatformBlock = (function() {
  function PlatformBlock() {}

  PlatformBlock.prototype.type = 'platform';

  PlatformBlock.prototype["static"] = true;

  PlatformBlock.prototype.move = function() {
    return false;
  };

  PlatformBlock.prototype.update = function() {
    return false;
  };

  return PlatformBlock;

})();

BoxBlock = (function() {
  BoxBlock.prototype.type = 'box';

  BoxBlock.prototype["static"] = false;

  function BoxBlock(level1, position3) {
    this.level = level1;
    this.position = position3;
  }

  BoxBlock.prototype.move = function(direction, force) {
    var above, here, next;
    if (force >= 1) {
      here = this.position;
      next = vec.add(here, direction);
      if (this.level.blockAt(next).move(direction, force - 1)) {
        above = vec.add(here, [0, 0, 1]);
        this.level.blockAt(above).move(direction, force);
        this.level.swapBlocksAt(here, next);
        return true;
      }
    }
    return false;
  };

  BoxBlock.prototype.update = function() {
    var gravity;
    gravity = 1;
    return this.move([0, 0, -1], gravity);
  };

  return BoxBlock;

})();

LiftBlock = (function() {
  LiftBlock.prototype.type = 'lift';

  LiftBlock.prototype["static"] = false;

  function LiftBlock(level1, position3) {
    this.level = level1;
    this.position = position3;
    this.bottom = this.position[2];
    this.top = this.position[2];
  }

  LiftBlock.prototype.move = function() {
    return false;
  };

  LiftBlock.prototype.update = function() {
    var above, below, down, force, here, up;
    up = [0, 0, 1];
    down = [0, 0, -1];
    here = this.position;
    above = vec.add(here, up);
    below = vec.add(here, down);
    if (this.level.blockAt(above).type === 'empty') {
      if (here[2] !== this.bottom) {
        if (this.level.blockAt(below).type === 'empty') {
          this.level.swapBlocksAt(here, below);
          return true;
        }
      }
    } else {
      if (here[2] !== this.top) {
        force = 2e308;
        if (this.level.blockAt(above).move(up, force)) {
          this.level.swapBlocksAt(here, above);
          return true;
        }
      }
    }
    return false;
  };

  return LiftBlock;

})();

Player = (function() {
  Player.prototype.type = 'player';

  Player.prototype["static"] = false;

  function Player(level1, position3) {
    this.level = level1;
    this.position = position3;
    this.direction = [0, 1, 0];
  }

  Player.prototype.move = function(direction, force) {
    var here, next;
    if (direction[2] === 0) {
      this.direction = direction;
    }
    here = this.position;
    next = vec.add(here, direction);
    if (this.level.blockAt(next).move(direction, force)) {
      this.level.swapBlocksAt(here, next);
      return true;
    }
    return false;
  };

  Player.prototype.update = function() {
    var gravity;
    gravity = 1;
    return this.move([0, 0, -1], gravity);
  };

  return Player;

})();

LevelState = (function(superClass) {
  extend(LevelState, superClass);

  function LevelState(levelData) {
    var block, instance, layer, position, row, x, y, z;
    this.blockArray = (function() {
      var j, len, results;
      results = [];
      for (z = j = 0, len = levelData.length; j < len; z = ++j) {
        layer = levelData[z];
        results.push((function() {
          var len1, n, results1;
          results1 = [];
          for (y = n = 0, len1 = layer.length; n < len1; y = ++n) {
            row = layer[y];
            results1.push((function() {
              var len2, o, results2;
              results2 = [];
              for (x = o = 0, len2 = row.length; o < len2; x = ++o) {
                block = row[x];
                position = [x, y, z];
                switch (block) {
                  case 'O':
                    results2.push(new SolidBlock);
                    break;
                  case 'X':
                    results2.push(new PlatformBlock);
                    break;
                  case '#':
                    results2.push(new BoxBlock(this, position));
                    break;
                  case '^':
                    results2.push(new LiftBlock(this, position));
                    break;
                  case 'S':
                    results2.push(this.player = new Player(this, position));
                    break;
                  default:
                    results2.push(new EmptyBlock(this, position));
                }
              }
              return results2;
            }).call(this));
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    this.height = this.blockArray.length;
    this.depth = this.blockArray[0].length;
    this.width = this.blockArray[0][0].length;
    instance = this;
    this.forEach('lift', function(lift, position) {
      var below;
      below = instance.blockBelow(position);
      if (below.type === 'lift') {
        below.top = position[2];
        return instance.setBlockAt(position, new EmptyBlock);
      }
    });
    this.steps = 0;
    this.asleep = false;
    this.solved = false;
    this.onUpdate = function() {};
  }

  LevelState.prototype.forEach = function(type, callback) {
    var block, j, layer, len, len1, len2, n, o, ref, result, row, x, y, z;
    result = [];
    ref = this.blockArray;
    for (z = j = 0, len = ref.length; j < len; z = ++j) {
      layer = ref[z];
      for (y = n = 0, len1 = layer.length; n < len1; y = ++n) {
        row = layer[y];
        for (x = o = 0, len2 = row.length; o < len2; x = ++o) {
          block = row[x];
          if (block.type === type) {
            result.push(callback(block, [x, y, z]));
          }
        }
      }
    }
    return result;
  };

  LevelState.prototype.forEachBlock = function(callback) {
    var block, j, layer, len, ref, results, row, x, y, z;
    ref = this.blockArray;
    results = [];
    for (z = j = 0, len = ref.length; j < len; z = ++j) {
      layer = ref[z];
      results.push((function() {
        var len1, n, results1;
        results1 = [];
        for (y = n = 0, len1 = layer.length; n < len1; y = ++n) {
          row = layer[y];
          results1.push((function() {
            var len2, o, results2;
            results2 = [];
            for (x = o = 0, len2 = row.length; o < len2; x = ++o) {
              block = row[x];
              results2.push(callback(block, [x, y, z]));
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  };

  LevelState.prototype.blockAt = function(position) {
    var x, y, z;
    x = position[0], y = position[1], z = position[2];
    if (x < 0 || x >= this.width) {
      return new EmptyBlock(this, position);
    }
    if (y < 0 || y >= this.depth) {
      return new EmptyBlock(this, position);
    }
    if (z < 0 || z >= this.height) {
      return new EmptyBlock(this, position);
    }
    return this.blockArray[z][y][x];
  };

  LevelState.prototype.blockBelow = function(position) {
    var block, x, y, z;
    x = position[0], y = position[1], z = position[2];
    while (!(--z < 0)) {
      block = this.blockAt([x, y, z]);
      if (block.type !== 'empty') {
        return block;
      }
    }
    return new EmptyBlock(this, [x, y, z]);
  };

  LevelState.prototype.setBlockAt = function(position, block) {
    var x, y, z;
    block.level = this;
    block.position = position;
    x = position[0], y = position[1], z = position[2];
    return this.blockArray[z][y][x] = block;
  };

  LevelState.prototype.swapBlocksAt = function(position1, position2) {
    var block1, block2;
    block1 = this.blockAt(position1);
    block2 = this.blockAt(position2);
    this.setBlockAt(position1, block2);
    return this.setBlockAt(position2, block1);
  };

  LevelState.prototype.movePlayer = function(direction) {
    var force, offset;
    if (!(this.solved || this.asleep)) {
      offset = (function() {
        switch (direction) {
          case 'left':
            return [-1, 0, 0];
          case 'up':
            return [0, -1, 0];
          case 'right':
            return [1, 0, 0];
          case 'down':
            return [0, 1, 0];
        }
      })();
      force = 1;
      if (this.player.move(offset, force)) {
        this.steps++;
        return this.update(true);
      }
    }
  };

  LevelState.prototype.checkIfSolved = function() {
    var allBoxesInPlace, instance;
    allBoxesInPlace = true;
    instance = this;
    this.forEach('box', function(box, position) {
      if (instance.blockBelow(position).type !== 'platform') {
        return allBoxesInPlace = false;
      }
    });
    if (allBoxesInPlace === true) {
      return this.solved = true;
    }
  };

  LevelState.prototype.update = function(changed) {
    var instance;
    if (changed == null) {
      changed = false;
    }
    if (changed === false) {
      this.forEachBlock(function(block) {
        return changed = block.update() || changed;
      });
    }
    if (changed) {
      this.onUpdate();
      this.asleep = true;
      instance = this;
      this.notifyObservers(function() {
        return instance.update();
      });
    } else {
      this.checkIfSolved();
      if (this.solved) {
        this.onUpdate();
      }
      this.asleep = false;
    }
    return changed;
  };

  return LevelState;

})(Observable);

PlayerController = (function() {
  var getRelativeDirection, relativeDirections;

  relativeDirections = [
    {
      left: 'left',
      up: 'up',
      right: 'right',
      down: 'down'
    }, {
      left: 'up',
      up: 'right',
      right: 'down',
      down: 'left'
    }, {
      left: 'right',
      up: 'down',
      right: 'left',
      down: 'up'
    }, {
      left: 'down',
      up: 'left',
      right: 'up',
      down: 'right'
    }
  ];

  getRelativeDirection = function(rotationZ) {
    var index, mod, q;
    q = rotationZ + (Math.PI / 4);
    mod = q % (2 * Math.PI);
    if (mod < 0) {
      mod = mod + 2 * Math.PI;
    }
    index = Math.floor(mod / (Math.PI / 2));
    return relativeDirections[index];
  };

  function PlayerController(levelView) {
    var camera;
    camera = levelView.camera;
    $('#controlUp').on('click', function () {
        levelView.currState.movePlayer(getRelativeDirection(camera.rotation[2]).up);
        return false;
    });
    $('#controlRight').on('click', function () {
        levelView.currState.movePlayer(getRelativeDirection(camera.rotation[2]).right);
        return false;
    });
    $('#controlDown').on('click', function () {
        levelView.currState.movePlayer(getRelativeDirection(camera.rotation[2]).down);
        return false;
    });
    $('#controlLeft').on('click', function () {
        levelView.currState.movePlayer(getRelativeDirection(camera.rotation[2]).left);
        return false;
    });
    $(document).on('keydown', function(e) {
      var directions, levelState, rotationZ;
      levelState = levelView.currState;
      rotationZ = camera.rotation[2];
      directions = getRelativeDirection(rotationZ);
      switch (e.which) {
        case 37:
          levelState.movePlayer(directions.left);
          return false;
        case 38:
          levelState.movePlayer(directions.up);
          return false;
        case 39:
          levelState.movePlayer(directions.right);
          return false;
        case 40:
          levelState.movePlayer(directions.down);
          return false;
      }
      return true;
    });
  }

  return PlayerController;

})();

UI = (function() {
  function UI(game1) {
    var instance;
    this.game = game1;
    this.stepsCounter = $('#steps');
    this.levelCounter = $('#level').find('.levelNumber');
    this.nextBtn = $('#nextBtn');
    this.previousBtn = $('#previousBtn');
    this.menu = $('#menu');
    this.menu.hide();
    this.menuTitle = this.menu.find('.title');
    this.menuOverlay = $('#menuOverlay');
    this.menuOverlay.hide();
    this.menuShown = false;
    this.continueBtn = $('#continueBtn');
    this.continueBtn.hide();
    this.restartBtn = $('#restartBtn');
    this.menuBtn = $('#menuBtn');
    this.highscoreTable = $('.highscore > .table');
    instance = this;
    this.nextBtn.on('click', function() {
      var game;
      instance.menu.fadeOut();
      instance.menuOverlay.fadeOut();
      instance.menuShown = false;
      game = instance.game;
      if (game != null) {
        game.nextLevel();
        instance.levelCounter.html(game.currentLevel);
        return instance.resetStepsCount();
      }
    });
    this.previousBtn.on('click', function() {
      var game;
      instance.menu.fadeOut();
      instance.menuOverlay.fadeOut();
      instance.menuShown = false;
      game = instance.game;
      if (game != null) {
        game.previousLevel();
        instance.levelCounter.html(game.currentLevel);
        return instance.resetStepsCount();
      }
    });
    this.restartBtn.on('click', function() {
      var game;
      game = instance.game;
      if ((game != null) && !instance.menuShown) {
        game.restartLevel();
        return instance.resetStepsCount();
      }
    });
    this.menuBtn.on('click', function() {
      var ref, ref1;
      if (instance.menuShown) {
        instance.menu.fadeOut();
        instance.menuOverlay.fadeOut();
        return instance.menuShown = false;
      } else {
        instance.setMenuTitle('Options');
        instance.updateHighscoreTable();
        instance.continueBtn.show();
        if (ref = instance.game.currentLevel, indexOf.call(instance.game.solvedLevels, ref) >= 0) {
          instance.nextBtn.show();
        } else {
          instance.nextBtn.hide();
        }
        if (ref1 = instance.game.currentLevel - 1, indexOf.call(instance.game.solvedLevels, ref1) >= 0) {
          instance.previousBtn.show();
        } else {
          instance.previousBtn.hide();
        }
        instance.menuOverlay.fadeIn();
        instance.menu.fadeIn();
        return instance.menuShown = true;
      }
    });
    this.continueBtn.on('click', function() {
      instance.menu.fadeOut();
      instance.menuOverlay.fadeOut();
      return instance.menuShown = false;
    });
    $(document).on('keydown', function(e) {
      var game;
      switch (e.which) {
        case 82:
          game = instance.game;
          if ((game != null) && !instance.menuShown) {
            game.restartLevel();
            instance.resetStepsCount();
          }
      }
      return true;
    });
  }

  UI.prototype.update = function(game, args) {
    var levelState, ref, steps;
    this.game = game;
    levelState = args[0];
    steps = levelState.steps;
    if (levelState.solved) {
      this.game.highscore.setHighscore(game.currentLevel, steps);
      this.game.solvedLevels.push(this.game.currentLevel);
      this.continueBtn.hide();
      this.setMenuTitle('Good job!');
      this.updateHighscoreTable();
      this.nextBtn.show();
      if (ref = this.game.currentLevel - 1, indexOf.call(this.game.solvedLevels, ref) >= 0) {
        this.previousBtn.show();
      } else {
        this.previousBtn.hide();
      }
      this.menuOverlay.fadeIn();
      this.menu.fadeIn();
      this.menuShown = true;
    }
    return this.updateStepsCount(steps);
  };

  UI.prototype.showWinnerModal = function() {};

  UI.prototype.updateStepsCount = function(steps) {
    return this.stepsCounter.html(steps + ' steps');
  };

  UI.prototype.resetStepsCount = function() {
    return this.stepsCounter.html('0 steps');
  };

  UI.prototype.setMenuTitle = function(title) {
    return this.menuTitle.html(title);
  };

  UI.prototype.updateHighscoreTable = function() {
    var instance, tablebody;
    tablebody = this.highscoreTable.find('tbody');
    instance = this;
    return tablebody.children().each(function(index, element) {
      var cell;
      cell = $(element).children('td').last();
      return cell.html(instance.game.highscore.getHighscore(index + 1) + " steps");
    });
  };

  return UI;

})();

Zoko = (function() {
  function Zoko(container) {
    var canvas, canvasOverlay, game, levelView, ui;
    canvas = container.find('canvas')[0];
    canvasOverlay = container.find('#overlay');
    e3d.init(canvas);
    levelView = new LevelView();
    new PlayerController(levelView);
    new CameraController(levelView, canvasOverlay);
    game = new ZokoGame(levelView);
    ui = new UI(game);
    game.observers = [ui];
    e3d.run();
  }

  return Zoko;

})();

resource_dir = '/assets/zoko/resources/';

loadImageFile = function(filename, callback) {
  var image;
  image = new Image;
  image.onload = function() {
    return callback(image);
  };
  return image.src = resource_dir + filename;
};

loadJsonFile = function(filename, callback) {
  var request;
  request = new XMLHttpRequest;
  request.open('GET', resource_dir + filename, true);
  request.onreadystatechange = function() {
    var data;
    if (request.readyState === 4) {
      data = JSON.parse(request.responseText);
      return callback(data);
    }
  };
  return request.send();
};

loadFilesUsing = function(loadFilesFunc, filenames, callback) {
  var entry, filename, key, loaded, nLoaded, nTotal, results;
  if (filenames instanceof Object === false) {
    filename = filenames;
    return loadFilesFunc(filename, callback);
  } else {
    if (filenames instanceof Array) {
      nTotal = filenames.length;
      loaded = [];
    } else {
      nTotal = 0;
      for (key in filenames) {
        if (!hasProp.call(filenames, key)) continue;
        nTotal++;
      }
      loaded = {};
    }
    nLoaded = 0;
    results = [];
    for (key in filenames) {
      if (!hasProp.call(filenames, key)) continue;
      entry = filenames[key];
      results.push((function(key) {
        return loadFilesUsing(loadFilesFunc, entry, function(data) {
          loaded[key] = data;
          if (++nLoaded === nTotal) {
            return callback(loaded);
          }
        });
      })(key));
    }
    return results;
  }
};

loadImageFiles = function(filenames, callback) {
  return loadFilesUsing(loadImageFile, filenames, callback);
};

loadJsonFiles = function(filenames, callback) {
  return loadFilesUsing(loadJsonFile, filenames, callback);
};

loadResourceFiles = function(filenames, callback) {
  var imagesLoaded, jsonLoaded, loaded;
  imagesLoaded = false;
  jsonLoaded = false;
  loaded = {};
  loadImageFiles(filenames.images, function(images) {
    loaded.images = images;
    imagesLoaded = true;
    if (jsonLoaded) {
      return callback(loaded);
    }
  });
  return loadJsonFiles(filenames.json, function(json) {
    loaded.json = json;
    jsonLoaded = true;
    if (imagesLoaded) {
      return callback(loaded);
    }
  });
};

e3d = e3d || {};

e3d.Camera = (function() {
  function Camera() {
    this.position = [0, 0, 0];
    this.rotation = [0, 0, 0];
    this.distance = 0;
  }

  Camera.prototype.createMatrix = function() {
    var aspect, eye, far, fovy, matrix, near, target, up;
    fovy = 45;
    aspect = e3d.width / e3d.height;
    near = 0.1;
    far = 100;
    eye = [0, 0, 0];
    target = [0, -1, 0];
    up = [0, 0, 1];
    matrix = mat.perspective(fovy, aspect, near, far);
    matrix = mat.lookat(matrix, eye, target, up);
    matrix = mat.translate(matrix, [0, -this.distance, 0]);
    matrix = mat.rotateX(matrix, -this.rotation[0]);
    matrix = mat.rotateY(matrix, -this.rotation[1]);
    matrix = mat.rotateZ(matrix, -this.rotation[2]);
    matrix = mat.translate(matrix, vec.neg(this.position));
    return matrix;
  };

  return Camera;

})();

e3d = e3d || {};

e3d.Mesh = (function() {
  function Mesh(data) {
    var gl, program;
    gl = e3d.gl;
    program = e3d.program.mesh;
    this.vertexbuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexbuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
    this.nvertices = data.length / 8;
  }

  Mesh.prototype.render = function() {
    var gl, program;
    gl = e3d.gl;
    program = e3d.program.mesh;
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexbuffer);
    gl.vertexAttribPointer(program.aPositionLoc, 3, gl.FLOAT, false, 32, 0);
    gl.vertexAttribPointer(program.aTexCoordLoc, 2, gl.FLOAT, false, 32, 12);
    gl.vertexAttribPointer(program.aColorLoc, 3, gl.FLOAT, false, 32, 20);
    return gl.drawArrays(gl.TRIANGLES, 0, this.nvertices);
  };

  return Mesh;

})();

e3d = e3d || {};

e3d.Object = (function() {
  function Object() {
    this.position = [0, 0, 0];
    this.rotation = [0, 0, 0];
    this.scale = [1, 1, 1];
    this.meshes = [];
    this.textures = [];
    this.children = [];
  }

  Object.prototype.render = function(matrix) {
    var child, gl, i, j, len, len1, mesh, n, program, ref, ref1, results;
    gl = e3d.gl;
    program = e3d.program.mesh;
    matrix = mat.translate(matrix, this.position);
    matrix = mat.rotateX(matrix, this.rotation[0]);
    matrix = mat.rotateY(matrix, this.rotation[1]);
    matrix = mat.rotateZ(matrix, this.rotation[2]);
    matrix = mat.scale(matrix, this.scale);
    program.setMatrix(matrix);
    e3d.noTexture.use();
    ref = this.meshes;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      mesh = ref[i];
      if (mesh != null) {
        if (this.textures[i] != null) {
          this.textures[i].use();
        }
        mesh.render();
      }
    }
    ref1 = this.children;
    results = [];
    for (n = 0, len1 = ref1.length; n < len1; n++) {
      child = ref1[n];
      if (child != null) {
        results.push(child.render(matrix));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Object;

})();

e3d = e3d || {};

e3d.Scene = (function() {
  function Scene() {
    this.objects = [];
    this.camera = null;
  }

  Scene.prototype.render = function() {
    var j, len, matrix, object, program, ref;
    program = e3d.program.mesh;
    if (this.camera != null) {
      program.begin();
      matrix = this.camera.createMatrix();
      ref = this.objects;
      for (j = 0, len = ref.length; j < len; j++) {
        object = ref[j];
        if (object != null) {
          object.render(matrix);
        }
      }
      return program.end();
    }
  };

  return Scene;

})();

e3d = e3d || {};

e3d.Texture = (function() {
  function Texture(image) {
    var gl, pixels;
    gl = e3d.gl;
    this.texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, this.texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    if (image != null) {
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
      this.width = image.width;
      this.height = image.height;
    } else {
      pixels = new Uint8Array([255, 255, 255, 255]);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
      this.width = 0;
      this.height = 0;
    }
  }

  Texture.prototype.use = function() {
    var gl;
    gl = e3d.gl;
    return gl.bindTexture(gl.TEXTURE_2D, this.texture);
  };

  Texture.prototype.free = function() {
    var gl;
    gl = e3d.gl;
    if (this.texture != null) {
      gl.deleteTexture(this.texture);
      return this.texture = null;
    }
  };

  return Texture;

})();

e3d = e3d || {};

e3d.init = function(canvas) {
  var gl;
  gl = canvas.getContext('experimental-webgl', {
    alpha: false
  });
  gl.enable(gl.DEPTH_TEST);
  e3d.width = canvas.width;
  e3d.height = canvas.height;
  e3d.gl = gl;
  e3d.scene = null;
  e3d.noTexture = new e3d.Texture(null);
  e3d.onrender = null;
  return e3d.program.mesh.init();
};

e3d.run = function() {
  var frame, requestAnimationFrame;
  requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };
  frame = function() {
    var gl;
    requestAnimationFrame(frame);
    gl = e3d.gl;
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    if (e3d.scene != null) {
      e3d.scene.render();
    }
    if (e3d.onrender != null) {
      return e3d.onrender();
    }
  };
  return requestAnimationFrame(frame);
};

mat = {
  row: function(m, i) {
    return [m[i * 4 + 0], m[i * 4 + 1], m[i * 4 + 2], m[i * 4 + 3]];
  },
  col: function(m, i) {
    return [m[i + 4 * 0], m[i + 4 * 1], m[i + 4 * 2], m[i + 4 * 3]];
  },
  mul: function(a, b) {
    var c0, c1, c2, c3, dot, r0, r1, r2, r3;
    c0 = mat.col(a, 0);
    c1 = mat.col(a, 1);
    c2 = mat.col(a, 2);
    c3 = mat.col(a, 3);
    r0 = mat.row(b, 0);
    r1 = mat.row(b, 1);
    r2 = mat.row(b, 2);
    r3 = mat.row(b, 3);
    dot = vec.dot4;
    return [dot(c0, r0), dot(c1, r0), dot(c2, r0), dot(c3, r0), dot(c0, r1), dot(c1, r1), dot(c2, r1), dot(c3, r1), dot(c0, r2), dot(c1, r2), dot(c2, r2), dot(c3, r2), dot(c0, r3), dot(c1, r3), dot(c2, r3), dot(c3, r3)];
  },
  translate: function(m, v) {
    var t;
    t = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, v[0], v[1], v[2], 1];
    return mat.mul(m, t);
  },
  scale: function(m, v) {
    var s;
    s = [v[0], 0, 0, 0, 0, v[1], 0, 0, 0, 0, v[2], 0, 0, 0, 0, 1];
    return mat.mul(m, s);
  },
  rotateX: function(m, a) {
    var c, r, s;
    s = Math.sin(a);
    c = Math.cos(a);
    r = [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];
    return mat.mul(m, r);
  },
  rotateY: function(m, a) {
    var c, r, s;
    s = Math.sin(a);
    c = Math.cos(a);
    r = [c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1];
    return mat.mul(m, r);
  },
  rotateZ: function(m, a) {
    var c, r, s;
    s = Math.sin(a);
    c = Math.cos(a);
    r = [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    return mat.mul(m, r);
  },
  lookat: function(m, eye, target, up) {
    var dot, l, x, y, z;
    z = vec.unit(vec.sub(eye, target));
    x = vec.unit(vec.cross(z, up));
    y = vec.unit(vec.cross(x, z));
    dot = vec.dot;
    l = [x[0], y[0], z[0], 0, x[1], y[1], z[1], 0, x[2], y[2], z[2], 0, -dot(x, eye), -dot(y, eye), -dot(z, eye), 1];
    return mat.mul(m, l);
  },
  identity: function() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },
  frustum: function(left, right, bottom, top, near, far) {
    var a00, a11, a20, a21, a22, a32;
    a00 = (near * 2) / (right - left);
    a11 = (near * 2) / (top - bottom);
    a20 = (right + left) / (right - left);
    a21 = (top + bottom) / (top - bottom);
    a22 = -(far + near) / (far - near);
    a32 = -(far * near * 2) / (far - near);
    return [a00, 0, 0, 0, 0, a11, 0, 0, a20, a21, a22, -1, 0, 0, a32, 0];
  },
  perspective: function(fovy, aspect, near, far) {
    var right, top;
    top = near * Math.tan(fovy * Math.PI / 360);
    right = top * aspect;
    return mat.frustum(-right, right, -top, top, near, far);
  }
};

e3d = e3d || {};

e3d.program = {
  mesh: {
    vertexSource: "uniform mat4 uMatrix;\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nattribute vec3 aColor;\nvarying vec2 vTexCoord;\nvarying vec3 vColor;\n\nvoid main() {\n\n  gl_Position = uMatrix * vec4(aPosition,1);\n  vTexCoord = aTexCoord;\n  vColor = aColor;\n\n}",
    fragmentSource: "precision mediump float;\n\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvarying vec3 vColor;\n\nvoid main() {\n\n  gl_FragColor = texture2D(uTexture, vTexCoord) * vec4(vColor,1);\n\n}",
    init: function() {
      var gl, me, program, uMatrixLoc, uTextureLoc;
      gl = e3d.gl;
      me = e3d.program.mesh;
      program = e3d.compileProgram(me.vertexSource, me.fragmentSource);
      uMatrixLoc = gl.getUniformLocation(program, 'uMatrix');
      uTextureLoc = gl.getUniformLocation(program, 'uTexture');
      me.aPositionLoc = gl.getAttribLocation(program, 'aPosition');
      me.aTexCoordLoc = gl.getAttribLocation(program, 'aTexCoord');
      me.aColorLoc = gl.getAttribLocation(program, 'aColor');
      gl.useProgram(program);
      gl.uniform1i(uTextureLoc, 0);
      gl.useProgram(null);
      me.setMatrix = function(matrix) {
        return gl.uniformMatrix4fv(uMatrixLoc, false, matrix);
      };
      me.begin = function() {
        gl.useProgram(program);
        gl.enableVertexAttribArray(me.aPositionLoc);
        gl.enableVertexAttribArray(me.aTexCoordLoc);
        return gl.enableVertexAttribArray(me.aColorLoc);
      };
      return me.end = function() {
        gl.disableVertexAttribArray(me.aPositionLoc);
        gl.disableVertexAttribArray(me.aTexCoordLoc);
        gl.disableVertexAttribArray(me.aColorLoc);
        return gl.useProgram(null);
      };
    }
  }
};

e3d.compileProgram = function(vertexSource, fragmentSource) {
  var compileShader, gl, program;
  gl = e3d.gl;
  compileShader = function(type, source) {
    var shader;
    shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.log(gl.getShaderInfoLog(shader));
      throw "compileShader fail!";
    }
    return shader;
  };
  program = gl.createProgram();
  gl.attachShader(program, compileShader(gl.VERTEX_SHADER, vertexSource));
  gl.attachShader(program, compileShader(gl.FRAGMENT_SHADER, fragmentSource));
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log(gl.getProgramInfoLog(program));
    throw "linkProgram fail!";
  }
  return program;
};

vec = {
  equal: function(u, v) {
    return (u === v) || (u[0] === v[0] && u[1] === v[1] && u[2] === v[2]);
  },
  add: function(u, v) {
    return [u[0] + v[0], u[1] + v[1], u[2] + v[2]];
  },
  sub: function(u, v) {
    return [u[0] - v[0], u[1] - v[1], u[2] - v[2]];
  },
  mul: function(v, k) {
    return [v[0] * k, v[1] * k, v[2] * k];
  },
  div: function(v, k) {
    return [v[0] / k, v[1] / k, v[2] / k];
  },
  neg: function(v) {
    return [-v[0], -v[1], -v[2]];
  },
  dot: function(u, v) {
    return u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
  },
  dot4: function(u, v) {
    return u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3];
  },
  cross: function(u, v) {
    return [u[1] * v[2] - u[2] * v[1], u[2] * v[0] - u[0] * v[2], u[0] * v[1] - u[1] * v[0]];
  },
  len: function(v) {
    return Math.sqrt(vec.dot(v, v));
  },
  unit: function(v) {
    return vec.div(v, vec.len(v));
  }
};

BoxObject = (function(superClass) {
  var boxMeshes, boxTextures;

  extend(BoxObject, superClass);

  boxMeshes = [];

  boxTextures = [];

  BoxObject.setTextures = function(textures) {
    var index, j, len, results, texture;
    results = [];
    for (index = j = 0, len = textures.length; j < len; index = ++j) {
      texture = textures[index];
      results.push(boxTextures[index] = texture);
    }
    return results;
  };

  function BoxObject(box1) {
    this.box = box1;
    BoxObject.__super__.constructor.call(this);
    if (boxMeshes.length === 0) {
      boxMeshes = [new e3d.Mesh(makeBox())];
    }
    this.meshes = boxMeshes;
    this.textures = boxTextures;
    this.prevPosition = this.box.position;
    this.position = this.box.position;
  }

  BoxObject.prototype.animate = function(frame) {
    var diff, dist, target, time;
    target = this.box.position;
    if (frame !== LevelView.ANIMATION_FRAMES_PER_STEP) {
      diff = vec.sub(target, this.prevPosition);
      time = frame / LevelView.ANIMATION_FRAMES_PER_STEP;
      dist = vec.mul(diff, time);
      return this.position = vec.add(this.prevPosition, dist);
    } else {
      this.position = target;
      return this.prevPosition = target;
    }
  };

  BoxObject.prototype.render = function(matrix) {
    return BoxObject.__super__.render.call(this, matrix);
  };

  return BoxObject;

})(e3d.Object);

Camera = (function(superClass) {
  var maxY, minY;

  extend(Camera, superClass);

  function Camera() {
    return Camera.__super__.constructor.apply(this, arguments);
  }

  maxY = 1.3;

  minY = 0.1;

  Camera.prototype.rotate = function(dx, dy) {
    var newRotation;
    newRotation = vec.add(this.rotation, [dy, 0, dx]);
    newRotation[0] = Math.min(newRotation[0], maxY);
    newRotation[0] = Math.max(newRotation[0], minY);
    return this.rotation = newRotation;
  };

  return Camera;

})(e3d.Camera);

LevelView = (function() {
  var ANIMATION_FRAMES_PER_STEP;

  ANIMATION_FRAMES_PER_STEP = 6;

  LevelView.ANIMATION_FRAMES_PER_STEP = ANIMATION_FRAMES_PER_STEP;

  function LevelView() {
    var imagefiles, instance;
    this.camera = new Camera;
    this.camera.distance = 12;
    this.scene = new e3d.Scene;
    this.scene.camera = this.camera;
    imagefiles = {
      'sky': ['/textures/sky.png'],
      'level': ['/textures/wall.png', '/textures/floor.png', '/textures/platform.png'],
      'box': ['/textures/box.png'],
      'lift': ['/textures/lift.png', '/textures/lifttop.png'],
      'player': ['/textures/player.png']
    };
    instance = this;
    loadImageFiles(imagefiles, function(images) {
      SkyObject.setTextures(createTextures(images['sky']));
      StaticLevelObject.setTextures(createTextures(images['level']));
      BoxObject.setTextures(createTextures(images['box']));
      LiftObject.setTextures(createTextures(images['lift']));
      PlayerObject.setTextures(createTextures(images['player']));
      return e3d.scene = instance.scene;
    });
    this.currState = null;
    this.onAnimationFinished = null;
    this.animationFramesLeft = 0;
  }

  LevelView.prototype.build = function(levelState) {
    var center, levelModel, skySphere;
    center = [levelState.width / 2, levelState.depth / 2, levelState.height / 2];
    this.camera.position = center;
    this.camera.rotation = [0.5, 0, 0];
    skySphere = new SkyObject;
    skySphere.position = center;
    levelModel = new StaticLevelObject(levelState);
    this.boxGroup = new e3d.Object;
    this.boxGroup.children = levelState.forEach('box', function(box, position) {
      return new BoxObject(box);
    });
    this.liftGroup = new e3d.Object;
    this.liftGroup.children = levelState.forEach('lift', function(lift, x, y, z) {
      return new LiftObject(lift);
    });
    this.player = new PlayerObject(levelState.player);
    return this.scene.objects = [skySphere, levelModel, this.boxGroup, this.liftGroup, this.player];
  };

  LevelView.prototype.update = function(levelState, args) {
    var instance;
    if (levelState !== this.currState) {
      this.currState = levelState;
      this.build(levelState);
      instance = this;
      e3d.onrender = function() {
        var animationFramesLeft, box, boxes, callback, camera, diff, frame, j, len, len1, lift, lifts, n, player, toAdd;
        player = instance.player;
        boxes = instance.boxGroup.children;
        lifts = instance.liftGroup.children;
        animationFramesLeft = instance.animationFramesLeft;
        if (animationFramesLeft > 0) {
          frame = ANIMATION_FRAMES_PER_STEP - animationFramesLeft + 1;
          player.animate(frame);
          for (j = 0, len = boxes.length; j < len; j++) {
            box = boxes[j];
            box.animate(frame);
          }
          for (n = 0, len1 = lifts.length; n < len1; n++) {
            lift = lifts[n];
            lift.animate(frame);
          }
          instance.animationFramesLeft--;
        } else {
          callback = instance.onAnimationFinished;
          if (callback != null) {
            instance.onAnimationFinished = null;
            callback();
          }
        }
        camera = instance.camera;
        diff = vec.sub(vec.add(player.position, [0.0, 0.0, 0.0]), camera.position);
        toAdd = vec.mul(diff, 0.05);
        return camera.position = vec.add(camera.position, toAdd);
      };
    }
    if (args[0] != null) {
      this.onAnimationFinished = args[0];
      return this.animationFramesLeft = ANIMATION_FRAMES_PER_STEP;
    }
  };

  return LevelView;

})();

LiftObject = (function(superClass) {
  var liftMeshes, liftTextures;

  extend(LiftObject, superClass);

  liftMeshes = [];

  liftTextures = [];

  LiftObject.setTextures = function(textures) {
    var index, j, len, results, texture;
    results = [];
    for (index = j = 0, len = textures.length; j < len; index = ++j) {
      texture = textures[index];
      results.push(liftTextures[index] = texture);
    }
    return results;
  };

  function LiftObject(lift1) {
    this.lift = lift1;
    LiftObject.__super__.constructor.call(this);
    if (liftMeshes.length === 0) {
      liftMeshes = [new e3d.Mesh(makeLidlessBox()), new e3d.Mesh(makeTopFace())];
    }
    this.meshes = liftMeshes;
    this.textures = liftTextures;
    this.prevPosition = this.lift.position;
    this.position = this.lift.position;
  }

  LiftObject.prototype.animate = function(frame) {
    var diff, dist, target, time;
    target = this.lift.position;
    if (frame !== LevelView.ANIMATION_FRAMES_PER_STEP) {
      diff = vec.sub(target, this.prevPosition);
      time = frame / LevelView.ANIMATION_FRAMES_PER_STEP;
      dist = vec.mul(diff, time);
      return this.position = vec.add(this.prevPosition, dist);
    } else {
      this.position = target;
      return this.prevPosition = target;
    }
  };

  LiftObject.prototype.render = function(matrix) {
    return LiftObject.__super__.render.call(this, matrix);
  };

  return LiftObject;

})(e3d.Object);

PlayerObject = (function(superClass) {
  var playerMeshes, playerTextures;

  extend(PlayerObject, superClass);

  playerMeshes = [];

  playerTextures = [];

  PlayerObject.setTextures = function(textures) {
    var index, j, len, results, texture;
    results = [];
    for (index = j = 0, len = textures.length; j < len; index = ++j) {
      texture = textures[index];
      results.push(playerTextures[index] = texture);
    }
    return results;
  };

  function PlayerObject(player1) {
    var position;
    this.player = player1;
    PlayerObject.__super__.constructor.call(this);
    if (playerMeshes.length === 0) {
      playerMeshes[0] = null;
      loadJsonFile('models/player.json', function(player) {
        return playerMeshes[0] = new e3d.Mesh(player);
      });
    }
    this.meshes = playerMeshes;
    this.textures = playerTextures;
    position = vec.add(this.player.position, [0.5, 0.5, 0.5]);
    this.prevPosition = position;
    this.position = position;
    this.scale = [0.5, 0.5, 0.5];
  }

  PlayerObject.prototype.animate = function(frame) {
    var diff, dist, target, time;
    target = vec.add(this.player.position, [0.5, 0.5, 0.5]);
    if (frame !== LevelView.ANIMATION_FRAMES_PER_STEP) {
      diff = vec.sub(target, this.prevPosition);
      time = frame / LevelView.ANIMATION_FRAMES_PER_STEP;
      dist = vec.mul(diff, time);
      return this.position = vec.add(this.prevPosition, dist);
    } else {
      this.position = target;
      return this.prevPosition = target;
    }
  };

  PlayerObject.prototype.render = function(matrix) {
    var direction, halfPI;
    direction = this.player.direction;
    halfPI = Math.PI / 2;
    if (vec.equal(direction, [0, 1, 0])) {
      this.rotation = [0, 0, 0 * halfPI];
    }
    if (vec.equal(direction, [-1, 0, 0])) {
      this.rotation = [0, 0, 1 * halfPI];
    }
    if (vec.equal(direction, [0, -1, 0])) {
      this.rotation = [0, 0, 2 * halfPI];
    }
    if (vec.equal(direction, [1, 0, 0])) {
      this.rotation = [0, 0, 3 * halfPI];
    }
    return PlayerObject.__super__.render.call(this, matrix);
  };

  return PlayerObject;

})(e3d.Object);

SkyObject = (function(superClass) {
  var skyMeshes, skyTextures;

  extend(SkyObject, superClass);

  skyMeshes = [];

  skyTextures = [];

  SkyObject.setTextures = function(textures) {
    var index, j, len, results, texture;
    results = [];
    for (index = j = 0, len = textures.length; j < len; index = ++j) {
      texture = textures[index];
      results.push(skyTextures[index] = texture);
    }
    return results;
  };

  function SkyObject() {
    SkyObject.__super__.constructor.call(this);
    if (skyMeshes.length === 0) {
      skyMeshes[0] = null;
      loadJsonFile('models/sky.json', function(sky) {
        return skyMeshes[0] = new e3d.Mesh(sky);
      });
    }
    this.meshes = skyMeshes;
    this.textures = skyTextures;
    this.scale = [75, 75, 75];
  }

  return SkyObject;

})(e3d.Object);

StaticLevelObject = (function(superClass) {
  var levelTextures;

  extend(StaticLevelObject, superClass);

  levelTextures = [];

  StaticLevelObject.setTextures = function(textures) {
    var index, j, len, results, texture;
    results = [];
    for (index = j = 0, len = textures.length; j < len; index = ++j) {
      texture = textures[index];
      results.push(levelTextures[index] = texture);
    }
    return results;
  };

  function StaticLevelObject(levelState) {
    var depth, platformTop, side, solidTop, width;
    StaticLevelObject.__super__.constructor.call(this);
    width = levelState.width;
    depth = levelState.depth;
    side = [];
    solidTop = [];
    platformTop = [];
    levelState.forEachBlock(function(block, position) {
      var backBlock, frontBlock, leftBlock, rightBlock, topBlock;
      if (block["static"]) {
        leftBlock = levelState.blockAt(vec.add(position, [-1, 0, 0]));
        rightBlock = levelState.blockAt(vec.add(position, [1, 0, 0]));
        backBlock = levelState.blockAt(vec.add(position, [0, -1, 0]));
        frontBlock = levelState.blockAt(vec.add(position, [0, 1, 0]));
        topBlock = levelState.blockAt(vec.add(position, [0, 0, 1]));
        if (!leftBlock["static"]) {
          side = side.concat(makeLeftFace(position));
        }
        if (!rightBlock["static"]) {
          side = side.concat(makeRightFace(position));
        }
        if (!backBlock["static"]) {
          side = side.concat(makeBackFace(position));
        }
        if (!frontBlock["static"]) {
          side = side.concat(makeFrontFace(position));
        }
        if (!topBlock["static"]) {
          if (block.type === 'solid') {
            solidTop = solidTop.concat(makeTopFace(position));
          }
          if (block.type === 'platform') {
            return platformTop = platformTop.concat(makeTopFace(position));
          }
        }
      }
    });
    this.meshes = [new e3d.Mesh(side), new e3d.Mesh(solidTop), new e3d.Mesh(platformTop)];
    this.textures = levelTextures;
  }

  return StaticLevelObject;

})(e3d.Object);

createTextures = function(images) {
  var image, j, len, results;
  results = [];
  for (j = 0, len = images.length; j < len; j++) {
    image = images[j];
    results.push(new e3d.Texture(image));
  }
  return results;
};

makeQuad = function(positions, color) {
  var b, g, p, r, v;
  p = positions;
  r = color[0], g = color[1], b = color[2];
  v = [[p[0][0], p[0][1], p[0][2], 0, 0, r, g, b], [p[1][0], p[1][1], p[1][2], 1, 0, r, g, b], [p[2][0], p[2][1], p[2][2], 0, 1, r, g, b], [p[3][0], p[3][1], p[3][2], 1, 1, r, g, b]];
  return [].concat(v[0], v[1], v[2], v[3], v[2], v[1]);
};

makeLeftFace = function(position) {
  var color, positions, x, y, z;
  if (position == null) {
    position = [0, 0, 0];
  }
  x = position[0], y = position[1], z = position[2];
  positions = [[x, y, z + 1], [x, y + 1, z + 1], [x, y, z], [x, y + 1, z]];
  color = [0.7, 0.7, 0.7];
  return makeQuad(positions, color);
};

makeRightFace = function(position) {
  var color, positions, x, y, z;
  if (position == null) {
    position = [0, 0, 0];
  }
  x = position[0], y = position[1], z = position[2];
  positions = [[x + 1, y + 1, z + 1], [x + 1, y, z + 1], [x + 1, y + 1, z], [x + 1, y, z]];
  color = [0.8, 0.8, 0.8];
  return makeQuad(positions, color);
};

makeBackFace = function(position) {
  var color, positions, x, y, z;
  if (position == null) {
    position = [0, 0, 0];
  }
  x = position[0], y = position[1], z = position[2];
  positions = [[x + 1, y, z + 1], [x, y, z + 1], [x + 1, y, z], [x, y, z]];
  color = [0.6, 0.6, 0.6];
  return makeQuad(positions, color);
};

makeFrontFace = function(position) {
  var color, positions, x, y, z;
  if (position == null) {
    position = [0, 0, 0];
  }
  x = position[0], y = position[1], z = position[2];
  positions = [[x, y + 1, z + 1], [x + 1, y + 1, z + 1], [x, y + 1, z], [x + 1, y + 1, z]];
  color = [0.9, 0.9, 0.9];
  return makeQuad(positions, color);
};

makeTopFace = function(position) {
  var color, positions, x, y, z;
  if (position == null) {
    position = [0, 0, 0];
  }
  x = position[0], y = position[1], z = position[2];
  positions = [[x, y, z + 1], [x + 1, y, z + 1], [x, y + 1, z + 1], [x + 1, y + 1, z + 1]];
  color = [1.0, 1.0, 1.0];
  return makeQuad(positions, color);
};

makeLidlessBox = function(position) {
  return [].concat(makeLeftFace(position), makeRightFace(position), makeBackFace(position), makeFrontFace(position));
};

makeBox = function(position) {
  return [].concat(makeLidlessBox(position), makeTopFace(position));
};

$(document).ready(function () {

});